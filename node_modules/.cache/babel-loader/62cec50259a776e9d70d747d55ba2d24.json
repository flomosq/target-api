{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * jQuery UI Button 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n//>>label: Button\n//>>group: Widgets\n//>>description: Enhances a form with themeable buttons.\n//>>docs: http://api.jqueryui.com/button/\n//>>demos: http://jqueryui.com/button/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/button.css\n//>>css.theme: ../../themes/base/theme.css\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", // These are only for backcompat\n    // TODO: Remove after 1.12\n    \"./controlgroup\", \"./checkboxradio\", \"../keycode\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  $.widget(\"ui.button\", {\n    version: \"1.12.1\",\n    defaultElement: \"<button>\",\n    options: {\n      classes: {\n        \"ui-button\": \"ui-corner-all\"\n      },\n      disabled: null,\n      icon: null,\n      iconPosition: \"beginning\",\n      label: null,\n      showLabel: true\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var disabled,\n          // This is to support cases like in jQuery Mobile where the base widget does have\n      // an implementation of _getCreateOptions\n      options = this._super() || {};\n      this.isInput = this.element.is(\"input\");\n      disabled = this.element[0].disabled;\n\n      if (disabled != null) {\n        options.disabled = disabled;\n      }\n\n      this.originalLabel = this.isInput ? this.element.val() : this.element.html();\n\n      if (this.originalLabel) {\n        options.label = this.originalLabel;\n      }\n\n      return options;\n    },\n    _create: function _create() {\n      if (!this.option.showLabel & !this.options.icon) {\n        this.options.showLabel = true;\n      } // We have to check the option again here even though we did in _getCreateOptions,\n      // because null may have been passed on init which would override what was set in\n      // _getCreateOptions\n\n\n      if (this.options.disabled == null) {\n        this.options.disabled = this.element[0].disabled || false;\n      }\n\n      this.hasTitle = !!this.element.attr(\"title\"); // Check to see if the label needs to be set or if its already correct\n\n      if (this.options.label && this.options.label !== this.originalLabel) {\n        if (this.isInput) {\n          this.element.val(this.options.label);\n        } else {\n          this.element.html(this.options.label);\n        }\n      }\n\n      this._addClass(\"ui-button\", \"ui-widget\");\n\n      this._setOption(\"disabled\", this.options.disabled);\n\n      this._enhance();\n\n      if (this.element.is(\"a\")) {\n        this._on({\n          \"keyup\": function keyup(event) {\n            if (event.keyCode === $.ui.keyCode.SPACE) {\n              event.preventDefault(); // Support: PhantomJS <= 1.9, IE 8 Only\n              // If a native click is available use it so we actually cause navigation\n              // otherwise just trigger a click event\n\n              if (this.element[0].click) {\n                this.element[0].click();\n              } else {\n                this.element.trigger(\"click\");\n              }\n            }\n          }\n        });\n      }\n    },\n    _enhance: function _enhance() {\n      if (!this.element.is(\"button\")) {\n        this.element.attr(\"role\", \"button\");\n      }\n\n      if (this.options.icon) {\n        this._updateIcon(\"icon\", this.options.icon);\n\n        this._updateTooltip();\n      }\n    },\n    _updateTooltip: function _updateTooltip() {\n      this.title = this.element.attr(\"title\");\n\n      if (!this.options.showLabel && !this.title) {\n        this.element.attr(\"title\", this.options.label);\n      }\n    },\n    _updateIcon: function _updateIcon(option, value) {\n      var icon = option !== \"iconPosition\",\n          position = icon ? this.options.iconPosition : value,\n          displayBlock = position === \"top\" || position === \"bottom\"; // Create icon\n\n      if (!this.icon) {\n        this.icon = $(\"<span>\");\n\n        this._addClass(this.icon, \"ui-button-icon\", \"ui-icon\");\n\n        if (!this.options.showLabel) {\n          this._addClass(\"ui-button-icon-only\");\n        }\n      } else if (icon) {\n        // If we are updating the icon remove the old icon class\n        this._removeClass(this.icon, null, this.options.icon);\n      } // If we are updating the icon add the new icon class\n\n\n      if (icon) {\n        this._addClass(this.icon, null, value);\n      }\n\n      this._attachIcon(position); // If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove\n      // the iconSpace if there is one.\n\n\n      if (displayBlock) {\n        this._addClass(this.icon, null, \"ui-widget-icon-block\");\n\n        if (this.iconSpace) {\n          this.iconSpace.remove();\n        }\n      } else {\n        // Position is beginning or end so remove the ui-widget-icon-block class and add the\n        // space if it does not exist\n        if (!this.iconSpace) {\n          this.iconSpace = $(\"<span> </span>\");\n\n          this._addClass(this.iconSpace, \"ui-button-icon-space\");\n        }\n\n        this._removeClass(this.icon, null, \"ui-wiget-icon-block\");\n\n        this._attachIconSpace(position);\n      }\n    },\n    _destroy: function _destroy() {\n      this.element.removeAttr(\"role\");\n\n      if (this.icon) {\n        this.icon.remove();\n      }\n\n      if (this.iconSpace) {\n        this.iconSpace.remove();\n      }\n\n      if (!this.hasTitle) {\n        this.element.removeAttr(\"title\");\n      }\n    },\n    _attachIconSpace: function _attachIconSpace(iconPosition) {\n      this.icon[/^(?:end|bottom)/.test(iconPosition) ? \"before\" : \"after\"](this.iconSpace);\n    },\n    _attachIcon: function _attachIcon(iconPosition) {\n      this.element[/^(?:end|bottom)/.test(iconPosition) ? \"append\" : \"prepend\"](this.icon);\n    },\n    _setOptions: function _setOptions(options) {\n      var newShowLabel = options.showLabel === undefined ? this.options.showLabel : options.showLabel,\n          newIcon = options.icon === undefined ? this.options.icon : options.icon;\n\n      if (!newShowLabel && !newIcon) {\n        options.showLabel = true;\n      }\n\n      this._super(options);\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"icon\") {\n        if (value) {\n          this._updateIcon(key, value);\n        } else if (this.icon) {\n          this.icon.remove();\n\n          if (this.iconSpace) {\n            this.iconSpace.remove();\n          }\n        }\n      }\n\n      if (key === \"iconPosition\") {\n        this._updateIcon(key, value);\n      } // Make sure we can't end up with a button that has neither text nor icon\n\n\n      if (key === \"showLabel\") {\n        this._toggleClass(\"ui-button-icon-only\", null, !value);\n\n        this._updateTooltip();\n      }\n\n      if (key === \"label\") {\n        if (this.isInput) {\n          this.element.val(value);\n        } else {\n          // If there is an icon, append it, else nothing then append the value\n          // this avoids removal of the icon when setting label text\n          this.element.html(value);\n\n          if (this.icon) {\n            this._attachIcon(this.options.iconPosition);\n\n            this._attachIconSpace(this.options.iconPosition);\n          }\n        }\n      }\n\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        this._toggleClass(null, \"ui-state-disabled\", value);\n\n        this.element[0].disabled = value;\n\n        if (value) {\n          this.element.blur();\n        }\n      }\n    },\n    refresh: function refresh() {\n      // Make sure to only check disabled if its an element that supports this otherwise\n      // check for the disabled class to determine state\n      var isDisabled = this.element.is(\"input, button\") ? this.element[0].disabled : this.element.hasClass(\"ui-button-disabled\");\n\n      if (isDisabled !== this.options.disabled) {\n        this._setOptions({\n          disabled: isDisabled\n        });\n      }\n\n      this._updateTooltip();\n    }\n  }); // DEPRECATED\n\n  if ($.uiBackCompat !== false) {\n    // Text and Icons options\n    $.widget(\"ui.button\", $.ui.button, {\n      options: {\n        text: true,\n        icons: {\n          primary: null,\n          secondary: null\n        }\n      },\n      _create: function _create() {\n        if (this.options.showLabel && !this.options.text) {\n          this.options.showLabel = this.options.text;\n        }\n\n        if (!this.options.showLabel && this.options.text) {\n          this.options.text = this.options.showLabel;\n        }\n\n        if (!this.options.icon && (this.options.icons.primary || this.options.icons.secondary)) {\n          if (this.options.icons.primary) {\n            this.options.icon = this.options.icons.primary;\n          } else {\n            this.options.icon = this.options.icons.secondary;\n            this.options.iconPosition = \"end\";\n          }\n        } else if (this.options.icon) {\n          this.options.icons.primary = this.options.icon;\n        }\n\n        this._super();\n      },\n      _setOption: function _setOption(key, value) {\n        if (key === \"text\") {\n          this._super(\"showLabel\", value);\n\n          return;\n        }\n\n        if (key === \"showLabel\") {\n          this.options.text = value;\n        }\n\n        if (key === \"icon\") {\n          this.options.icons.primary = value;\n        }\n\n        if (key === \"icons\") {\n          if (value.primary) {\n            this._super(\"icon\", value.primary);\n\n            this._super(\"iconPosition\", \"beginning\");\n          } else if (value.secondary) {\n            this._super(\"icon\", value.secondary);\n\n            this._super(\"iconPosition\", \"end\");\n          }\n        }\n\n        this._superApply(arguments);\n      }\n    });\n\n    $.fn.button = function (orig) {\n      return function () {\n        if (!this.length || this.length && this[0].tagName !== \"INPUT\" || this.length && this[0].tagName === \"INPUT\" && this.attr(\"type\") !== \"checkbox\" && this.attr(\"type\") !== \"radio\") {\n          return orig.apply(this, arguments);\n        }\n\n        if (!$.ui.checkboxradio) {\n          $.error(\"Checkboxradio widget missing\");\n        }\n\n        if (arguments.length === 0) {\n          return this.checkboxradio({\n            \"icon\": false\n          });\n        }\n\n        return this.checkboxradio.apply(this, arguments);\n      };\n    }($.fn.button);\n\n    $.fn.buttonset = function () {\n      if (!$.ui.controlgroup) {\n        $.error(\"Controlgroup widget missing\");\n      }\n\n      if (arguments[0] === \"option\" && arguments[1] === \"items\" && arguments[2]) {\n        return this.controlgroup.apply(this, [arguments[0], \"items.button\", arguments[2]]);\n      }\n\n      if (arguments[0] === \"option\" && arguments[1] === \"items\") {\n        return this.controlgroup.apply(this, [arguments[0], \"items.button\"]);\n      }\n\n      if (_typeof(arguments[0]) === \"object\" && arguments[0].items) {\n        arguments[0].items = {\n          button: arguments[0].items\n        };\n      }\n\n      return this.controlgroup.apply(this, arguments);\n    };\n  }\n\n  return $.ui.button;\n});","map":null,"metadata":{},"sourceType":"module"}