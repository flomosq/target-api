{"ast":null,"code":"/*!\n * jQuery UI Checkboxradio 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n//>>label: Checkboxradio\n//>>group: Widgets\n//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.\n//>>docs: http://api.jqueryui.com/checkboxradio/\n//>>demos: http://jqueryui.com/checkboxradio/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/button.css\n//>>css.structure: ../../themes/base/checkboxradio.css\n//>>css.theme: ../../themes/base/theme.css\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"../escape-selector\", \"../form-reset-mixin\", \"../labels\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  $.widget(\"ui.checkboxradio\", [$.ui.formResetMixin, {\n    version: \"1.12.1\",\n    options: {\n      disabled: null,\n      label: null,\n      icon: true,\n      classes: {\n        \"ui-checkboxradio-label\": \"ui-corner-all\",\n        \"ui-checkboxradio-icon\": \"ui-corner-all\"\n      }\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var disabled, labels;\n      var that = this;\n      var options = this._super() || {}; // We read the type here, because it makes more sense to throw a element type error first,\n      // rather then the error for lack of a label. Often if its the wrong type, it\n      // won't have a label (e.g. calling on a div, btn, etc)\n\n      this._readType();\n\n      labels = this.element.labels(); // If there are multiple labels, use the last one\n\n      this.label = $(labels[labels.length - 1]);\n\n      if (!this.label.length) {\n        $.error(\"No label found for checkboxradio widget\");\n      }\n\n      this.originalLabel = \"\"; // We need to get the label text but this may also need to make sure it does not contain the\n      // input itself.\n\n      this.label.contents().not(this.element[0]).each(function () {\n        // The label contents could be text, html, or a mix. We concat each element to get a\n        // string representation of the label, without the input as part of it.\n        that.originalLabel += this.nodeType === 3 ? $(this).text() : this.outerHTML;\n      }); // Set the label option if we found label text\n\n      if (this.originalLabel) {\n        options.label = this.originalLabel;\n      }\n\n      disabled = this.element[0].disabled;\n\n      if (disabled != null) {\n        options.disabled = disabled;\n      }\n\n      return options;\n    },\n    _create: function _create() {\n      var checked = this.element[0].checked;\n\n      this._bindFormResetHandler();\n\n      if (this.options.disabled == null) {\n        this.options.disabled = this.element[0].disabled;\n      }\n\n      this._setOption(\"disabled\", this.options.disabled);\n\n      this._addClass(\"ui-checkboxradio\", \"ui-helper-hidden-accessible\");\n\n      this._addClass(this.label, \"ui-checkboxradio-label\", \"ui-button ui-widget\");\n\n      if (this.type === \"radio\") {\n        this._addClass(this.label, \"ui-checkboxradio-radio-label\");\n      }\n\n      if (this.options.label && this.options.label !== this.originalLabel) {\n        this._updateLabel();\n      } else if (this.originalLabel) {\n        this.options.label = this.originalLabel;\n      }\n\n      this._enhance();\n\n      if (checked) {\n        this._addClass(this.label, \"ui-checkboxradio-checked\", \"ui-state-active\");\n\n        if (this.icon) {\n          this._addClass(this.icon, null, \"ui-state-hover\");\n        }\n      }\n\n      this._on({\n        change: \"_toggleClasses\",\n        focus: function focus() {\n          this._addClass(this.label, null, \"ui-state-focus ui-visual-focus\");\n        },\n        blur: function blur() {\n          this._removeClass(this.label, null, \"ui-state-focus ui-visual-focus\");\n        }\n      });\n    },\n    _readType: function _readType() {\n      var nodeName = this.element[0].nodeName.toLowerCase();\n      this.type = this.element[0].type;\n\n      if (nodeName !== \"input\" || !/radio|checkbox/.test(this.type)) {\n        $.error(\"Can't create checkboxradio on element.nodeName=\" + nodeName + \" and element.type=\" + this.type);\n      }\n    },\n    // Support jQuery Mobile enhanced option\n    _enhance: function _enhance() {\n      this._updateIcon(this.element[0].checked);\n    },\n    widget: function widget() {\n      return this.label;\n    },\n    _getRadioGroup: function _getRadioGroup() {\n      var group;\n      var name = this.element[0].name;\n      var nameSelector = \"input[name='\" + $.ui.escapeSelector(name) + \"']\";\n\n      if (!name) {\n        return $([]);\n      }\n\n      if (this.form.length) {\n        group = $(this.form[0].elements).filter(nameSelector);\n      } else {\n        // Not inside a form, check all inputs that also are not inside a form\n        group = $(nameSelector).filter(function () {\n          return $(this).form().length === 0;\n        });\n      }\n\n      return group.not(this.element);\n    },\n    _toggleClasses: function _toggleClasses() {\n      var checked = this.element[0].checked;\n\n      this._toggleClass(this.label, \"ui-checkboxradio-checked\", \"ui-state-active\", checked);\n\n      if (this.options.icon && this.type === \"checkbox\") {\n        this._toggleClass(this.icon, null, \"ui-icon-check ui-state-checked\", checked)._toggleClass(this.icon, null, \"ui-icon-blank\", !checked);\n      }\n\n      if (this.type === \"radio\") {\n        this._getRadioGroup().each(function () {\n          var instance = $(this).checkboxradio(\"instance\");\n\n          if (instance) {\n            instance._removeClass(instance.label, \"ui-checkboxradio-checked\", \"ui-state-active\");\n          }\n        });\n      }\n    },\n    _destroy: function _destroy() {\n      this._unbindFormResetHandler();\n\n      if (this.icon) {\n        this.icon.remove();\n        this.iconSpace.remove();\n      }\n    },\n    _setOption: function _setOption(key, value) {\n      // We don't allow the value to be set to nothing\n      if (key === \"label\" && !value) {\n        return;\n      }\n\n      this._super(key, value);\n\n      if (key === \"disabled\") {\n        this._toggleClass(this.label, null, \"ui-state-disabled\", value);\n\n        this.element[0].disabled = value; // Don't refresh when setting disabled\n\n        return;\n      }\n\n      this.refresh();\n    },\n    _updateIcon: function _updateIcon(checked) {\n      var toAdd = \"ui-icon ui-icon-background \";\n\n      if (this.options.icon) {\n        if (!this.icon) {\n          this.icon = $(\"<span>\");\n          this.iconSpace = $(\"<span> </span>\");\n\n          this._addClass(this.iconSpace, \"ui-checkboxradio-icon-space\");\n        }\n\n        if (this.type === \"checkbox\") {\n          toAdd += checked ? \"ui-icon-check ui-state-checked\" : \"ui-icon-blank\";\n\n          this._removeClass(this.icon, null, checked ? \"ui-icon-blank\" : \"ui-icon-check\");\n        } else {\n          toAdd += \"ui-icon-blank\";\n        }\n\n        this._addClass(this.icon, \"ui-checkboxradio-icon\", toAdd);\n\n        if (!checked) {\n          this._removeClass(this.icon, null, \"ui-icon-check ui-state-checked\");\n        }\n\n        this.icon.prependTo(this.label).after(this.iconSpace);\n      } else if (this.icon !== undefined) {\n        this.icon.remove();\n        this.iconSpace.remove();\n        delete this.icon;\n      }\n    },\n    _updateLabel: function _updateLabel() {\n      // Remove the contents of the label ( minus the icon, icon space, and input )\n      var contents = this.label.contents().not(this.element[0]);\n\n      if (this.icon) {\n        contents = contents.not(this.icon[0]);\n      }\n\n      if (this.iconSpace) {\n        contents = contents.not(this.iconSpace[0]);\n      }\n\n      contents.remove();\n      this.label.append(this.options.label);\n    },\n    refresh: function refresh() {\n      var checked = this.element[0].checked,\n          isDisabled = this.element[0].disabled;\n\n      this._updateIcon(checked);\n\n      this._toggleClass(this.label, \"ui-checkboxradio-checked\", \"ui-state-active\", checked);\n\n      if (this.options.label !== null) {\n        this._updateLabel();\n      }\n\n      if (isDisabled !== this.options.disabled) {\n        this._setOptions({\n          \"disabled\": isDisabled\n        });\n      }\n    }\n  }]);\n  return $.ui.checkboxradio;\n});","map":null,"metadata":{},"sourceType":"module"}